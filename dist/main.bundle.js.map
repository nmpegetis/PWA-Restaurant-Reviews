{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/idb/lib/idb.js","webpack:///./js/idbhandler.js","webpack:///./js/dbhelper.js","webpack:///./js/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","e","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","error","promisifyRequestCall","obj","method","args","apply","then","proxyProperties","ProxyClass","targetProp","properties","forEach","prop","this","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","oldVersion","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","createObjectStore","IDBDatabase","funcName","replace","arr","Array","slice","callback","length","nativeObject","getAll","query","count","instance","items","iterateCursor","push","continue","exp","open","version","upgradeCallback","indexedDB","onupgradeneeded","event","delete","IdbHandler","reviewsUrl","restaurantsUrl","configurable","writable","server","navigator","serviceWorker","console","log","_idb2","upgradeDb","keyPath","dbPromise","collectionName","idbCollection","fetch","response","json","data","map","record","put","catch","restaurantId","autoIncrement","id","add","allReviews","offlineReviews","filter","review","offline","offlineReview","headers","Accept","Content-Type","body","JSON","stringify","res","idbStore","updatedRestaurant","is_favorite","concat","_idbhandler","DBHelper","fetchIdbData","openDB","restaurants","fetchAndStoreIdbData","reviews","fetchRestaurants","restaurant","find","fetchReviews","allreviews","restaurantReviews","restaurant_id","cuisine","results","cuisine_type","neighborhood","favorite","neighborhoods","v","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","favorites","newValue","toggleFavoriteInApiDBandIdb","favoriteValue","toggleFavoriteInIdb","formData","formName","createdAt","formDate","updatedAt","rating","formRatings","comments","formComments","unsync","updateIdbData","location","reload","photograph","newMap","marker","L","latlng","lat","lng","title","alt","url","urlForRestaurant","addTo","postIdbOfflineDataInApiDB","_dbhelper","document","addEventListener","setFilterListeners","initMap","fetchNeighborhoods","fetchCuisines","fetchFavorites","self","fillNeighborhoodsHTML","select","getElementById","option","createElement","innerHTML","append","fillCuisinesHTML","fillFavoritesHTML","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","updateRestaurants","querySelector","onchange","cSelect","nSelect","fSelect","cIndex","selectedIndex","nIndex","fIndex","fetchRestaurantByCuisineAndNeighborhoodAndFavorite","resetRestaurants","fillRestaurantsHTML","markers","remove","ul","createRestaurantHTML","addMarkersToMap","li","image","className","src","imageUrlForRestaurant","altText","container","favoriteStar","starAltText","onclick","toggleFavorite","address","more","window","href","mapMarkerForRestaurant","on","options"],"mappings":"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","file":"main.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","import idb from 'idb';\n\nconst idbName = 'restaurant-db';\nconst idbRestaurantsCollection = 'restaurants';\nconst idbReviewsCollection = 'reviews';\nconst idbVersion = 1;\nconst idbPermission = 'readwrite';\n\nconst server = 'pwa-restaurant-reviews-server.herokuapp.com';\nconst port = '1337';\nexport const restaurantsUrl = `https://${server}/restaurants`;\nexport const reviewsUrl = `https://${server}/reviews`;\n\n/*eslint-disable no-unused-vars*/\n\nexport class IdbHandler {\n  static openDB() {\n    if (!navigator.serviceWorker) {\n      console.log('Service Worker in use...');\n      return Promise.resolve();\n    }\n    console.log('Opening idb...');\n    return idb.open(idbName, idbVersion, upgradeDb => {\n      upgradeDb.createObjectStore(idbRestaurantsCollection, { keyPath: 'id' });\n      upgradeDb.createObjectStore(idbReviewsCollection, { keyPath: 'id' });\n    });\n  }\n\n  /* fetch restaurant data from idb */\n  static fetchIdbData(dbPromise, collectionName) {\n    const idbCollection =\n      collectionName === 'restaurants'\n        ? idbRestaurantsCollection\n        : idbReviewsCollection;\n\n    return dbPromise.then(db => {\n      if (!db) return;\n      return db\n        .transaction(idbCollection)\n        .objectStore(idbCollection)\n        .getAll();\n    });\n  }\n\n  /* fetch restaurant data from server and store to idb */\n  static fetchAndStoreIdbData(dbPromise, collectionName, callback) {\n    const url = collectionName === 'restaurants' ? restaurantsUrl : reviewsUrl;\n    const idbCollection =\n      collectionName === 'restaurants'\n        ? idbRestaurantsCollection\n        : idbReviewsCollection;\n\n    fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        dbPromise.then(db => {\n          if (!db) return;\n          data.map(record =>\n            db\n              .transaction(idbCollection, idbPermission)\n              .objectStore(idbCollection)\n              .put(record)\n          );\n        });\n        return callback(null, data);\n      })\n      .catch(error => callback(error, null));\n  }\n\n  /* update review data from form post to idb */\n  static updateIdbData(dbPromise, restaurantId, data) {\n    const idbCollection = idbReviewsCollection;\n\n    dbPromise.then(db => {\n      if (!db) return;\n      db.transaction(idbCollection, idbPermission)\n        .objectStore(idbCollection)\n        .count()\n        .then(autoIncrement => {\n          data.id = autoIncrement + 1;\n          db.transaction(idbCollection, idbPermission)\n            .objectStore(idbCollection)\n            .add(data);\n        })\n        .then(response => console.log('Added new review in idb'));\n    });\n  }\n\n  /* update Api DB data with idb offline data */\n  static postIdbOfflineDataInApiDB(dbPromise, restaurantId, data) {\n    const idbCollection = idbReviewsCollection;\n\n    dbPromise.then(db => {\n      if (!db) return;\n      db.transaction(idbCollection, idbPermission)\n        .objectStore(idbCollection)\n        .getAll()\n        .then(allReviews => {\n          const offlineReviews = allReviews.filter(\n            review => review.offline === 'true'\n          );\n          offlineReviews.map(review => {\n            delete review.offline;\n            return review;\n          });\n          console.log(\n            'allReviews',\n            allReviews,\n            'offlineReviews',\n            offlineReviews\n          );\n          return offlineReviews;\n        })\n        .then(offlineReviews =>\n          offlineReviews.map(offlineReview =>\n            db\n              .transaction(idbCollection, idbPermission)\n              .objectStore(idbCollection)\n              .put(offlineReview)\n              .then(response => {\n                fetch(reviewsUrl, {\n                  method: 'post',\n                  headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                  },\n                  body: JSON.stringify(offlineReview),\n                });\n              })\n          )\n        )\n        .then(res => console.log('Synced review of idb with api db'));\n    });\n  }\n\n  /* fetch restaurant data from server and store to idb */\n  static toggleFavoriteInIdb(dbPromise, restaurantId, value) {\n    /*eslint-disable no-undef*/\n    dbPromise\n      .then(db => {\n        if (!db) return;\n        const idbStore = db\n          .transaction(idbRestaurantsCollection, idbPermission)\n          .objectStore(idbRestaurantsCollection);\n        return idbStore;\n      })\n      .then(idbStore =>\n        idbStore.get(restaurantId).then(updatedRestaurant => {\n          updatedRestaurant.is_favorite = value;\n          idbStore.put(updatedRestaurant);\n        })\n      )\n      .then(res =>\n        console.log(\n          `Updated IDB with restaurant[${restaurantId}].is_favorite : ${value}`\n        )\n      );\n  }\n}\n","import { IdbHandler, restaurantsUrl, reviewsUrl } from './idbhandler';\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nexport class DBHelper {\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    IdbHandler.fetchIdbData(IdbHandler.openDB(), 'restaurants').then(\r\n      restaurants => {\r\n        !!restaurants && restaurants.length > 0\r\n          ? callback(null, restaurants)\r\n          : IdbHandler.fetchAndStoreIdbData(\r\n              IdbHandler.openDB(),\r\n              'restaurants',\r\n              callback\r\n            );\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fetch all reviews.\r\n   */\r\n  static fetchReviews(callback) {\r\n    IdbHandler.fetchIdbData(IdbHandler.openDB(), 'reviews').then(reviews => {\r\n      !!reviews && reviews.length > 0\r\n        ? callback(null, reviews)\r\n        : IdbHandler.fetchAndStoreIdbData(\r\n            IdbHandler.openDB(),\r\n            'reviews',\r\n            callback\r\n          );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (restaurant) {\r\n          // Got the restaurant\r\n          callback(null, restaurant);\r\n        } else {\r\n          // Restaurant does not exist in the database\r\n          callback('Restaurant does not exist', null);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchReviewsByRestaurantId(restaurantId, callback) {\r\n    // fetch all restaurants with proper error handling.\r\n    DBHelper.fetchReviews((error, allreviews) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        const restaurantReviews = allreviews.filter(\r\n          r => r.restaurant_id == restaurantId\r\n        );\r\n        console.log('restaurant Reviews', restaurantReviews);\r\n        if (restaurantReviews.length) {\r\n          // Got the restaurant\r\n          callback(null, restaurantReviews);\r\n        } else {\r\n          callback(\r\n            `There are no reviews for Restaurant with id:${restaurantId}`,\r\n            null\r\n          );\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByFavorite(favorite, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given is_favorite\r\n        const results = restaurants.filter(r => r.name == favorite);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhoodAndFavorite(\r\n    cuisine,\r\n    neighborhood,\r\n    favorite,\r\n    callback\r\n  ) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') {\r\n          // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') {\r\n          // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        if (favorite != 'all') {\r\n          // filter by favorite\r\n          results = results.filter(r => r.name == favorite);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map(\r\n          (v, i) => restaurants[i].neighborhood\r\n        );\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter(\r\n          (v, i) => neighborhoods.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter(\r\n          (v, i) => cuisines.indexOf(v) == i\r\n        );\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all favorites with proper error handling.\r\n   */\r\n  static fetchFavorites(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all favorite from all restaurants\r\n        const favorites = restaurants\r\n          .filter(restaurant => restaurant.is_favorite)\r\n          .map(restaurant => restaurant.name);\r\n        callback(null, favorites);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Toggle restaurant favoriting with proper error handling.\r\n   */\r\n  static toggleFavorite(restaurant, callback) {\r\n    console.log('toggle favorite');\r\n    const newValue = !restaurant.is_favorite;\r\n    DBHelper.toggleFavoriteInApiDBandIdb(restaurant.id, newValue, callback);\r\n  }\r\n\r\n  /**\r\n   * Toggle restaurant favoriting with proper error handling.\r\n   */\r\n  static toggleFavoriteInApiDBandIdb(restaurantId, value, callback) {\r\n    const favoriteValue = { is_favorite: value };\r\n    fetch(`${restaurantsUrl}/${restaurantId}/`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(favoriteValue), // data can be `string` or {object}!\r\n    })\r\n      .then(res => {\r\n        console.log(\r\n          `Updated API DB with restaurant[${restaurantId}].is_favorite : ${value}`\r\n        );\r\n        return res.json();\r\n      })\r\n      .catch(error => callback(error, null))\r\n      .then(\r\n        IdbHandler.toggleFavoriteInIdb(IdbHandler.openDB(), restaurantId, value)\r\n      )\r\n      .catch(error => callback(error, null));\r\n    // .then(location.reload(true));\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static saveReviewOffline(formData) {\r\n    const restaurantId = formData.id;\r\n    const data = {\r\n      restaurant_id: restaurantId,\r\n      name: formData.formName,\r\n      createdAt: formData.formDate,\r\n      updatedAt: formData.formDate,\r\n      rating: formData.formRatings,\r\n      comments: formData.formComments,\r\n      offline: formData.unsync,\r\n    };\r\n    IdbHandler.updateIdbData(IdbHandler.openDB(), restaurantId, data);\r\n    location.reload();\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return `./restaurant.html?id=${restaurant.id}`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return `/img/${restaurant.photograph}.jpg`;\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, newMap) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker\r\n    const marker = new L.marker(\r\n      [restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {\r\n        title: restaurant.name,\r\n        alt: restaurant.name,\r\n        url: DBHelper.urlForRestaurant(restaurant),\r\n      }\r\n    );\r\n    marker.addTo(newMap);\r\n    return marker;\r\n  }\r\n\r\n  static synchronizeOfflineReviews() {\r\n    console.log('Start sync...');\r\n    IdbHandler.postIdbOfflineDataInApiDB(IdbHandler.openDB(), 'reviews').then(\r\n      reviews => {}\r\n    );\r\n  }\r\n\r\n  /* static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  } */\r\n}\r\n","import { DBHelper } from './dbhelper';\r\n\r\nlet restaurants, neighborhoods, cuisines, favorites;\r\nlet newMap;\r\nconst markers = [];\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', event => {\r\n  setFilterListeners(); // needed due to es6 changes in arrow functions\r\n  newMap = initMap(); // added\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n  fetchFavorites();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) {\r\n      // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) {\r\n      // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Fetch all favorite restaurants and set their HTML.\r\n */\r\nconst fetchFavorites = () => {\r\n  DBHelper.fetchFavorites((error, favorites) => {\r\n    if (error) {\r\n      // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.favorites = favorites;\r\n      fillFavoritesHTML();\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillFavoritesHTML = (favorites = self.favorites) => {\r\n  const select = document.getElementById('favorites-select');\r\n  favorites.forEach(favorite => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = favorite;\r\n    option.value = favorite;\r\n    select.append(option);\r\n  });\r\n};\r\n\r\n/**\r\n * Initialize leaflet map, called from HTML.\r\n */\r\nconst initMap = () => {\r\n  const map = L.map('map', {\r\n    center: [40.722216, -73.987501],\r\n    zoom: 12,\r\n    scrollWheelZoom: false,\r\n  });\r\n  L.tileLayer(\r\n    'https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}',\r\n    {\r\n      mapboxToken:\r\n        'pk.eyJ1Ijoibm1wZWdldGlzIiwiYSI6ImNqamoyaDVkOTVqNzczcHMycTZ5YmpqYW4ifQ.PFeA3FhfCSfV43jdMdrO9w',\r\n      maxZoom: 18,\r\n      attribution:\r\n        'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n        '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n        'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n      id: 'mapbox.streets',\r\n    }\r\n  ).addTo(map);\r\n\r\n  updateRestaurants();\r\n\r\n  return map;\r\n};\r\n/* window.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n} */\r\n\r\nconst setFilterListeners = () => {\r\n  document.querySelector('#neighborhoods-select').onchange = updateRestaurants;\r\n  document.querySelector('#cuisines-select').onchange = updateRestaurants;\r\n  document.querySelector('#favorites-select').onchange = updateRestaurants;\r\n};\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n  const fSelect = document.getElementById('favorites-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n  const fIndex = fSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n  const favorite = fSelect[fIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhoodAndFavorite(\r\n    cuisine,\r\n    neighborhood,\r\n    favorite,\r\n    (error, restaurants) => {\r\n      if (error) {\r\n        // Got an error!\r\n        console.error(error);\r\n      } else {\r\n        resetRestaurants(restaurants);\r\n        fillRestaurantsHTML();\r\n      }\r\n    }\r\n  );\r\n};\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = restaurants => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers) {\r\n    self.markers.forEach(marker => marker.remove());\r\n  }\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n};\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n};\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = restaurant => {\r\n  const li = document.createElement('li');\r\n\r\n  const image = document.createElement('img');\r\n  image.className = 'restaurant-img';\r\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n  const altText = `Image of ${restaurant.name} restaurant in ${\r\n    restaurant.neighborhood\r\n  }`;\r\n  image.title = altText;\r\n  image.alt = altText;\r\n  li.append(image);\r\n\r\n  const container = document.createElement('div');\r\n  container.className = 'restaurant-info';\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  const favoriteStar = document.createElement('img');\r\n  favoriteStar.className = 'star-img';\r\n  favoriteStar.src = restaurant.is_favorite\r\n    ? '../img/starFilled.svg'\r\n    : '../img/starEmpty.svg';\r\n  const starAltText = restaurant.is_favorite\r\n    ? `Restaurant ${restaurant.name} is favorited. Click to remove.`\r\n    : `Restaurant ${restaurant.name} is not favorited. Click to add.`;\r\n  favoriteStar.title = starAltText;\r\n  favoriteStar.alt = starAltText;\r\n  favoriteStar.onclick = () => DBHelper.toggleFavorite(restaurant);\r\n  name.append(favoriteStar);\r\n  container.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  container.append(neighborhood);\r\n\r\n  const address = document.createElement('address');\r\n  address.innerHTML = restaurant.address;\r\n  container.append(address);\r\n\r\n  li.append(container);\r\n\r\n  const more = document.createElement('button');\r\n  more.innerHTML = 'View Details';\r\n  more.addEventListener('click', () => {\r\n    window.location.href = DBHelper.urlForRestaurant(restaurant);\r\n  });\r\n\r\n  li.append(more);\r\n\r\n  return li;\r\n};\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, newMap);\r\n    marker.on('click', onClick);\r\n\r\n    function onClick() {\r\n      window.location.href = marker.options.url;\r\n    }\r\n    self.markers.push(marker);\r\n  });\r\n};\r\n/* addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n} */\r\n"],"sourceRoot":""}